#配置数据源的名字
server.port=8085
spring.shardingsphere.datasource.names=m0,m1

#配置第一个数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/db1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=12345678

#配置第二个数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/db2?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=12345678

# 一个实体类对应两张表，覆盖a
spring.main.allow-bean-definition-overriding=true

##指定查询到库的那个表
spring.shardingsphere.sharding.tables.product_order.actual-data-nodes=m$->{0..1}.product_order_$->{0..1}

##定义主键的规则
spring.shardingsphere.sharding.tables.product_order.key-generator.column=id
spring.shardingsphere.sharding.tables.product_order.key-generator.type=snowflake

##指定表分片的策略 约定cid值，奇数在
#spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$->{id % 2}

#配置文件精准分片
spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.product_order.table-strategy.standard.precise-algorithm-class-name=com.example.shardingjdbc.config.PreciseTablesShardingConfig

##指定数据库的分片规则 约定user_id 奇数在库2 偶数在库1
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=db$->{id % 2 + 1}

#spring.shardingsphere.sharding.tables.product_order.database-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.product_order.database-strategy.inline.algorithm-expression=m$->{id % 2}
#配置文件数据库分片
spring.shardingsphere.sharding.tables.product_order.database-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.product_order.database-strategy.standard.precise-algorithm-class-name=com.example.shardingjdbc.config.AccurateDBShardingConfig

###打开sql日志
spring.shardingsphere.props.sql.show=true